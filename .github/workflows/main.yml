name: CI/CD Pipeline

on:
  push:
    branches:
      - "Youngsoo-deploy"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 소스 코드 체크아웃
        uses: actions/checkout@v4

      - name: 2. JDK 21 설정
        uses: actions/setup-java@v4
        with:
          java-version: "21" #
          distribution: "temurin"

      - name: 3. Maven으로 프로젝트 빌드 (테스트 스킵)
        run: mvn clean install -DskipTests

      - name: 4. 빌드 결과물(.jar) Artifact로 업로드
        uses: actions/upload-artifact@v4
        with:
          name: java-app-jar
          path: target/project-0.0.1-SNAPSHOT.jar

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 1. 빌드 결과물(.jar) Artifact 다운로드
        uses: actions/download-artifact@v4
        with:
          name: java-app-jar

      - name: 2. (필수) .jar 파일이 복사될 'target' 디렉토리 서버에 생성
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: 22
          script: |
            mkdir -p /root/newTeamProject/target

      - name: 3. .jar 파일을 원격 서버로 복사 (SCP)
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: 22
          source: "project-0.0.1-SNAPSHOT.jar"
          target: "/root/newTeamProject/target/"

      - name: 4. 원격 서버에서 배포 스크립트 실행
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.HOST_IP }}
          username: ${{ secrets.HOST_USERNAME }}
          password: ${{ secrets.HOST_PASSWORD }}
          port: 22
          script: |
            cd /root/newTeamProject
            git pull origin Youngsoo-deploy
            
            # GitHub Secrets 환경변수로 주입
            export DB_PASS=${{ secrets.DB_PASS }}
            export PORTONE_API_KEY=${{ secrets.PORTONE_API_KEY }}
            export PORTONE_SECRET=${{ secrets.PORTONE_SECRET }}
            export KAKAO_CLIENT_ID=${{ secrets.KAKAO_CLIENT_ID }}
            export KAKAO_CLIENT_SECRET=${{ secrets.KAKAO_CLIENT_SECRET }}
            export NAVER_CLIENT_ID=${{ secrets.NAVER_CLIENT_ID }}
            export NAVER_CLIENT_SECRET=${{ secrets.NAVER_CLIENT_SECRET }}
            
            # Docker Compose 실행
            docker compose -f .deploy/docker-compose.yml down
            docker compose -f .deploy/docker-compose.yml up --build -d
            
            # Docker 이미지 정리
            docker image prune -f