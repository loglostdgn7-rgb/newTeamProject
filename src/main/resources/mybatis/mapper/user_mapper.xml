<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">


<mapper namespace="team.project.mapper.UserMapper">
    <!--    유저선택-->
    <resultMap id="selectUserWithSnsMap" type="UserDTO" autoMapping="true">
        <id property="id" column="id"/>
        <collection property="snsUsers" ofType="SnsUserDTO" javaType="list" autoMapping="true">
            <id property="snsId" column="sns_id"/>
            <id property="clientName" column="client_name"/>
        </collection>
    </resultMap>

    <select id="selectUserById" resultType="UserDTO" resultMap="selectUserWithSnsMap">
        SELECT *
        FROM user
                 LEFT OUTER JOIN sns_user
                                 ON user.id = sns_user.user_id
        WHERE id = #{id}
    </select>

    <select id="selectUserBySnsId" resultMap="selectUserWithSnsMap">
        SELECT *
        FROM (SELECT user_id FROM sns_user WHERE sns_id = #{snsId} AND client_name = #{clientName}) `User_id`
                 INNER JOIN `user`
                            ON `user`.id = `User_id`.user_id
                 INNER JOIN `sns_user`
                            ON `sns_user`.user_id = `User_id`.user_id

    </select>

    <select id="selectUserByTel" resultType="String">
        SELECT id
        FROM user
        WHERE tel = #{tel}
    </select>

    <!-- /////// 주문 내역 //////-->
    <!--    주문 내역 넣기-->
    <insert id="insertOrder" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (order_id, user_id, imp_uid, merchant_uid, order_name, order_price, buyer_name, buyer_addr,
                            buyer_tel, order_request)
        VALUES (#{orderId}, #{userId}, #{impUid}, #{merchantUid}, #{orderName}, #{orderPrice}, #{buyerName},
                #{buyerAddr}, #{buyerTel}, #{orderRequest})
    </insert>

    <insert id="insertOrderDetail">
        INSERT INTO order_detail (order_detail_id, order_id, product_id, quantity, product_price)
        VALUES (#{orderDetailId}, #{orderId}, #{productId}, #{quantity}, #{productPrice})
    </insert>

    <!--    주문 내역 꺼내기-->
    <resultMap id="orderWithDetailResultMap" type="OrderDTO" autoMapping="true">
        <id property="orderId" column="order_id"/>
        <collection property="orderDetails" ofType="OrderDetailDTO" javaType="list" autoMapping="true">
            <id property="oderDetailId" column="oder_detail_id"/>
            <result property="productName" column="product_name"/>
            <result property="productImage" column="product_image"/>
        </collection>
    </resultMap>

    <select id="selectOrdersByUserId" resultMap="orderWithDetailResultMap">
        SELECT *,
               od.order_detail_id,
               od.product_id,
               od.product_price,
               od.quantity,
               p.name       as product_name,
               p.image_data as product_iamge
        FROM orders o
                 LEFT JOIN order_detail od ON o.order_id = od.order_id
                 LEFT JOIN product p ON od.product_id = p.product_id
        WHERE o.order_id = #{userId}
        ORDER BY o.order_date DESC
    </select>

    <select id="selectOrderByIdAndUserId" resultMap="orderWithDetailResultMap">
        SELECT o.*,
               od.order_detail_id,
               od.product_id,
               od.product_price,
               od.quantity,
               p.name       as product_name,
               p.image_data as product_image
        FROM orders o
                 LEFT JOIN order_detail od ON o.order_id = od.order_id
                 LEFT JOIN product p ON od.product_id = p.product_id
        WHERE o.user_id = #{userId}
          AND o.order_id = #{orderId}
    </select>


    <!--    <resultMap id="orderWithDetailMap" type="OrderDTO" autoMapping="true">-->
    <!--        <id property="orderId" column="order_id"/>-->
    <!--        <collection property="orderDetails"-->
    <!--                    ofType="OrderDetailDTO"-->
    <!--                    column="order_id"-->
    <!--                    select="selectOrderDetailByOrderId">-->
    <!--        </collection>-->
    <!--    </resultMap>-->

    <!--    <select id="selectOrdersByUserId" resultType="OrderDTO" resultMap="orderWithDetailMap">-->
    <!--        SELECT *-->
    <!--        FROM orders-->
    <!--        WHERE user_id = #{userId}-->
    <!--        ORDER By order_date DESC-->
    <!--    </select>-->

    <!--    <select id="selectOrderByIdAndUserId" resultType="OrderDTO" resultMap="orderWithDetailMap">-->
    <!--        SELECT *-->
    <!--        FROM orders-->
    <!--        WHERE user_id = #{userId}-->
    <!--          AND order_id = #{orderId}-->
    <!--    </select>-->

    <select id="selectOrderDetailByOrderId" resultType="OrderDetailDTO">
        SELECT *,
               order_detail_id    as orderDetailId,
               product.image_data as productImage,
               product.name       as productName
        FROM order_detail
                 INNER JOIN product on order_detail.product_id = product.product_id
        WHERE order_detail.order_id = #{orderId}
    </select>


    <!--   /////// 유저 삽입 ///////  -->
    <insert id="insertUser">
        INSERT INTO user (id, password, name, postcode, road_address, detail_address, tel, email, nickname)
        VALUES (#{id}, #{password}, #{name}, #{postcode}, #{roadAddress}, #{detailAddress}, #{tel}, #{email},
                #{nickname})
    </insert>

    <!--   /////// sns 연동 삽입 ///////  -->
    <insert id="insertSnsUser">
        INSERT INTO sns_user(user_id, sns_id, client_name)
        VALUES (#{userId}, #{snsId}, #{clientName})
    </insert>


    <!--////// 프로필 업데이트 //////-->
    <update id="updateProfile">
        UPDATE user
        SET name           = #{realName},
            postcode       = #{postcode},
            road_address   = #{roadAddress},
            detail_address = #{detailAddress},
            email          = #{email},
            nickname       = #{nickname}
        WHERE id = #{id}
### 비밀번호 업데이트는 별도로 해주고 있다
    </update>

    <!--//////// 유저 비번 업데이트 ///////-->
    <update id="updatePassword">
        UPDATE user
        SET password = #{encodedPassword}
        WHERE id = #{userId}
    </update>

    <!-- ///////////// 유저 삭제 /////////////-->
    <delete id="deleteUserById">
        DELETE
        FROM user
        WHERE id = #{id}
    </delete>

    <!-- ///////////// sns 연동 삭제 /////////////-->
    <delete id="deleteSnsUser">
        DELETE
        FROM sns_user
        WHERE user_id = #{userId}
          AND client_name = #{clientName}
    </delete>

</mapper>